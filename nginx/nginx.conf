# nginx/nginx.conf

events {}

#main block za config HTTP settings-a za sve server block-ove
#sav routing, SSL, proxying etc je konfigurisan unutar ovoga
http {

    # Upstream za moj Flask backend app
    # Govori nginx-u da forwarduje requesto-ve ka Flask app-u na port 5000,flask service name u docker-compose-u
    # Flask dev server (ili Gunicorn u production-u) ce slusati na port 5000 unutar tog container-a
    upstream flask_backend {
        server flask-app:5000;  
    }

    # Ovaj usptream se treba zakomentarisati za production jer ce Nginx servovati static files index.html css umesto
    # React Dev Servera
    # Upstream za moj React Development server, u developmentu da bih imao Live Reload cemo koristiti react dev server
    # Pointuje ka 'react_frontend' service definisan u docker-compose.yml (za development je ovaj docker-compose)
    # npm pocenji da slusa na portu 3000 unutar tog container-a
    upstream react_dev_server {
        server react_frontend:3000;
    }

        # HTTP to HTTPS Redirect
        server {
            listen 80;
            server_name localhost; # ili moj production domain
            return 301 https://$host$request_uri;
        }



    server {
        listen 443 ssl;         #slusa na portu 443(HTTPS),ssl keyword omogucava SSL/TLS na ovom portu
        server_name localhost;  #domain name koji ocekuje NGINX u requestovima

        # SSL/TLS certificate i key paths (generisan by mkcert for local dev)
        ssl_certificate /etc/nginx/certs/localhost.pem;             #ssl certifikat
        ssl_certificate_key /etc/nginx/certs/localhost-key.pem;     #privatan key mkcert to nam treba za HTTPS konekciju

        # Proxy API requests
        # u React-u pozive ka API cemo dodavati /api/ da ne bih ih mesali sa ostalim react stvarima
        # a ovde ce nginx skidati /api/
        #proxy_set_header Real-IP,FOR,Proto su header-i koje nginx dodaje  da bi FLASK app mogao da vidi pravi IP klienta,proto HTTPS/HTTP, zato sto
        # Flask App ce videti request i IP od Nginx-a kao izvor request-a pa ovako se osiguravamo da dobije pravi INFO
        # i onda nam treba werkzeug.middleware.proxy_fix, flask nece koristit IP od usera da nazad odgovara ka nginx-u vec taj ip se moze koristiti za logovanje IP user-a, display-ovanje njegov ip-a...
        # da donese odluke ako je request HTTP /HTTPS -> proto $sceheme
        # Flask odgovara po prinicipu da je nginx uspostavi TCP/IP konekciju sa flaskom i onda preko socket-a posalje request a flask-app vrati response preko tog socket-a

        location /api/ {                                            # govori nginx ako request pocinje sa api da ga posalje Flask backend-u  (Gunicorn-u u production-u)
            proxy_pass http://flask_backend/;                       # Promeniti u Gunicorn-u u productinu
            proxy_set_header Host $host;                            # Host cuva originalni host header, tj ogirinalni client info
            proxy_set_header X-Real-IP $remote_addr;                 
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Uzmi postojeci X-forwarded-For header (ako postoji od load-balancer npr) ako ne napravi svoj i dodaj $remote_addr tj adresu od onoga ko ti salje zahtev
            proxy_set_header X-Forwarded-Proto $scheme;
            # Za robust proxying
            proxy_connect_timeout 75s;
            proxy_send_timeout 75s;
            proxy_read_timeout 75s;
        }

        # Serveujemo React Frontend (Development Mode), Zakomentarisati dole location / kasnije zbog production-a
        # Svi requests NOT matching /api/ ce se proxi-ovati ka React development server
        # Omogucava live reloading provided od strane React dev server
        location / {
            proxy_pass http://react_dev_server; # Forwarduje ka react_dev_server-u gore u upstream react_dev_server sam definisao da je on react_frontend:3000 == react_dev_server 
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 75s;
            proxy_send_timeout 75s;
            proxy_read_timeout 75s;
        }

        # --- Production Static File Serving za React (Odkomentarisi i podesi za produkciju posle) ---
        # Ovo dole zamenjuje gornji  'location /' block  kada budem podesio za production
        # U production-u, Nginx serves  pre-built React files direktno zbog maks performansi
        # Moracu da pokrenem 'npm run build' u Frontend/my-app directory da kreiram ove fajlove
        # location / {
        #     root /usr/share/nginx/html;        # Putanja unutar Nginx container where built React files are mounted
        #     index index.html index.htm;
        #     try_files $uri $uri/ /index.html;  # Essential for client-side routing (e.g., React Router)
        #     expires 30d;                       # Cache static assets u browser su 30 dana
        #     add_header Cache-Control "public"; # Osigurava da browser caches public assets
        # }



        # Error logging
        error_log /var/log/nginx/error.log warn;
        access_log /var/log/nginx/access.log combined;
    }
}
